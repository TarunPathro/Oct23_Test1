name: github-action

env:
  apiKey: ${{ secrets.BLAZEMETER_API_KEY }}
  apiSecret: ${{ secrets.BLAZEMETER_API_SECRET }}
  createTest: "true"
  inputStartFile: ./Oct21_TestScripts_v1.jmx
  inputAllFiles: ./Scenario_1.csv
  testName: Oct23_TestScripts_v7
  projectID: 2439645
  continuePipeline: "false"
  showTailLog: "false"

  # Test configuration parameters
  testDuration: 60  # Total test duration in seconds (1 minute)
  rampUp: 20        # Ramp-up period in seconds
  rampDown: 20      # Ramp-down period in seconds
  usersCount: 5     # Number of virtual users

on: 
  push

jobs: 
  github-action:
    runs-on: ubuntu-latest
    steps: 
      # Step 1: Checkout the Code
      - name: Checkout
        uses: actions/checkout@v2.3.4

      # Step 2: Run BlazeMeter Test
      - name: Run Blazemeter test
        uses: BlazeRunner-BZR/Github-Action@v8.1
        id: run-test
        with:
          apiKey: ${{ env.apiKey }}
          apiSecret: ${{ env.apiSecret }}
          createTest: ${{ env.createTest }}
          inputStartFile: ${{ env.inputStartFile }}
          $inputAllFiles : "${{ env.inputAllFiles }}"
          testName: ${{ env.testName }}
          projectID: ${{ env.projectID }}
          continuePipeline: ${{ env.continuePipeline }}
          showTailLog: ${{ env.showTailLog }}
          testDuration: ${{ env.testDuration }}
          rampUp: ${{ env.rampUp }}
          rampDown: ${{ env.rampDown }}
          usersCount: ${{ env.usersCount }}

      # Step 3: Start BlazeMeter Test with Configuration
      - name: Start BlazeMeter Test with Configuration
        run: |
          echo "Starting BlazeMeter test with the following configuration:"
          echo "Users: $USERS_COUNT, Ramp-up: $RAMP_UP, Duration: $TEST_DURATION, Ramp-down: $RAMP_DOWN"
          
          curl -X POST "https://a.blazemeter.com/api/v4/tests/${TEST_ID}/start" \
            -u "${{ secrets.BLAZEMETER_API_KEY }}:${{ secrets.BLAZEMETER_API_SECRET }}" \
            -H "Content-Type: application/json" \
            -d '{
                "configuration": {
                  "execution": [{
                    "concurrency": '${USERS_COUNT}',      # Number of users
                    "rampUp": '${RAMP_UP}',               # Ramp-up time in seconds
                    "holdFor": '${TEST_DURATION}',        # Duration of the test in seconds
                    "rampDown": '${RAMP_DOWN}'            # Ramp-down time in seconds
                  }]
                }
              }'
          
          echo "Test started with ${USERS_COUNT} users, ramp-up of ${RAMP_UP}s, duration of ${TEST_DURATION}s, and ramp-down of ${RAMP_DOWN}s."
