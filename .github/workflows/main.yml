# Full GitHub Action YAML

name: BlazeMeter Test Execution with Multiple CSV Files

env:
  apiKey: ${{ secrets.BLAZEMETER_API_KEY }}
  apiSecret: ${{ secrets.BLAZEMETER_API_SECRET }}
  createTest: "true"
  inputStartFile: ./Oct21_TestScripts_v1.jmx
  inputAllFiles: ./Scenario_1.csv
  testName: Oct23_TestScripts_v4
  projectID: 2439645
  continuePipeline: "false"
  showTailLog: "false"

on:
  push:
    branches:
      - main

jobs:
  blazemeter-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.3.4

      # Print the working directory and list files
      - name: Debug
        run: |
          echo "Current directory: $(pwd)"
          ls -alh

      # Run PowerShell Script to Process Multiple CSV Files
      - name: Process Multiple CSV Files
        shell: pwsh
        run: |
          # PowerShell Script to Handle Multiple CSV Files
          $inputAllFiles = "${{ env.inputAllFiles }}"
          
          # Split the comma-separated list of files into an array
          $inputAllFilesArray = $inputAllFiles -split ','
          
          # Initialize an empty array for the test files
          $TestFiles = @()

          # Loop through each file and process them
          foreach ($file in $inputAllFilesArray) {
              if (Test-Path $file) {
                  # Add each file to the test files array
                  $TestFiles += Get-ChildItem -Path $file -Force -Recurse -File
              } else {
                  Write-Host "File $file not found."
              }
          }

          # Display the files that have been processed
          Write-Host "Files processed:"
          $TestFiles | ForEach-Object { Write-Host $_.FullName }

      # Run BlazeMeter Test AFTER CSV files are processed
      - name: Run BlazeMeter Test with Multiple CSVs
        id: run-test
        uses: BlazeRunner-BZR/Github-Action@v8.1
        with:
          apiKey: ${{ secrets.BLAZEMETER_API_KEY }}
          apiSecret: ${{ secrets.BLAZEMETER_API_SECRET }}
          createTest: ${{ env.createTest }}
          inputStartFile: ${{ env.inputStartFile }}
          inputAllFiles: ${{ env.inputAllFiles }}
          testName: ${{ env.testName }}
          projectID: ${{ env.projectID }}
          continuePipeline: ${{ env.continuePipeline }}
          showTailLog: ${{ env.showTailLog }}

      - name: Check Test ID
        run: |
          if [ -z "$TEST_ID" ]; then
            echo "Error: No test ID returned. Check the API response for details."
            exit 1
          else
            echo "Test uploaded successfully with ID: $TEST_ID"
          fi

      - name: Start BlazeMeter Test with Configuration
        run: |
          TEST_DURATION=300  # Test duration in seconds
          RAMP_UP=60         # Ramp-up period in seconds
          RAMP_DOWN=60       # Ramp-down period in seconds
          USERS_COUNT=50      # Number of virtual users
          
          curl -X POST "https://a.blazemeter.com/api/v4/tests/${TEST_ID}/start" \
            -u "${{ secrets.BLAZEMETER_API_KEY }}:${{ secrets.BLAZEMETER_API_SECRET }}" \
            -H "Content-Type: application/json" \
            -d '{
                "configuration": {
                  "execution": [{
                    "concurrency": '${USERS_COUNT}',
                    "rampUp": '${RAMP_UP}',
                    "holdFor": '${TEST_DURATION}',
                    "rampDown": '${RAMP_DOWN}'
                  }]
                }
              }'
          
          echo "Test started with ${USERS_COUNT} users, ramp-up of ${RAMP_UP}s, duration of ${TEST_DURATION}s, and ramp-down of ${RAMP_DOWN}s."
